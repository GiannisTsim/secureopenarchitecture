<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

    <!-- mvc annotation support -->
    <mvc:annotation-driven/>

    <!-- register controllers service etc -->
    <context:component-scan base-package="mil.navy.spawar.swif"/>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

    <!-- pull in spring security / cas beans -->
    <import resource="springSecurityConfig.xml"/>

    <!-- pull in database beans -->
    <import resource="database-config.xml"/>

    <!-- document security context attribute -->
    <bean id="securityContext" class="java.lang.String">
        <constructor-arg value="securityLabel"/>
    </bean>

    <bean id="idLabel" class="java.lang.String">
        <constructor-arg value="_id"/>
    </bean>

    <!-- classification attribute config -->
    <bean id="classificationConfig" class="mil.navy.spawar.swif.security.SecurityAttributeConfig">
        <property name="ldapAttributeName" value="swifUserClassification"/>
        <property name="dbAttributeName" value="classification"/>
        <property name="userDetailsName" value="classification"/>
        <property name="secLabelRequirement" value="RECORD"/>
    </bean>

    <!-- sci attribute config -->
    <bean id="sciConfig" class="mil.navy.spawar.swif.security.SecurityAttributeConfig">
        <property name="ldapAttributeName" value="swifUserScimarking"/>
        <property name="dbAttributeName" value="SCI"/>
        <property name="userDetailsName" value="sciMarking"/>
    </bean>

    <!-- sap attribute config -->
    <bean id="sapConfig" class="mil.navy.spawar.swif.security.SecurityAttributeConfig">
        <property name="ldapAttributeName" value="swifUserSapmarking"/>
        <property name="dbAttributeName" value="SAP"/>
        <property name="userDetailsName" value="sapMarking"/>
    </bean>

    <!-- relto attribute config -->
    <bean id="relToConfig" class="mil.navy.spawar.swif.security.SecurityAttributeConfig">
        <property name="ldapAttributeName" value="swifUserCountry"/>
        <property name="dbAttributeName" value="RELTO"/>
        <property name="userDetailsName" value="country"/>
        <property name="defaultValue" value="USA"/>
    </bean>

    <!-- list of active attributes -->
    <util:list id="securityAttributeConfigs">
        <ref bean="classificationConfig"/>
        <ref bean="sciConfig"/>
        <ref bean="sapConfig"/>
        <ref bean="relToConfig"/>
    </util:list>

    <!-- referenced from spring security config -->
    <!-- populates authenticated user detail object -->
    <bean id="swifUserDetailsMapper" class="mil.navy.spawar.swif.security.SwifUserDetailsContextMapper">
        <property name="attributeConfigs" ref="securityAttributeConfigs"/>
    </bean>

    <!-- classification attribute security pre-query filer -->
    <bean id="classificationPreQueryFilter" class="mil.navy.spawar.swif.security.filters.ClassificationMongoQueryFilter" >
		<property name="databaseLabel" ref="securityContext" />
		<property name="attributeConfig" ref="classificationConfig" />
    </bean>

    <!-- sci attribute security pre-query filer -->
    <bean id="sciPreQueryFilter" class="mil.navy.spawar.swif.security.filters.SCIMongoQueryFilter" >
		<property name="databaseLabel" ref="securityContext" />
		<property name="attributeConfig" ref="sciConfig" />
    </bean>

    <!-- sap attribute security pre-query filer -->
    <bean id="sapPreQueryFilter" class="mil.navy.spawar.swif.security.filters.SAPMongoQueryFilter" >
		<property name="databaseLabel" ref="securityContext" />
		<property name="attributeConfig" ref="sapConfig" />
    </bean>

    <!-- relto attribute security pre-query filer -->
    <bean id="reltoPreQueryFilter" class="mil.navy.spawar.swif.security.filters.RelToMongoQueryFilter" >
        <property name="databaseLabel" ref="securityContext" />
        <property name="attributeConfig" ref="relToConfig" />
    </bean>

    <!-- classification attribute security post-query filer -->
    <bean id="classificationPostQueryFilter" class="mil.navy.spawar.swif.security.filters.ClassificationMongoRecordFilter" >
		<property name="databaseLabel" ref="securityContext" />
		<property name="attributeConfig" ref="classificationConfig" />
    </bean>

    <!-- sci attribute security post-query filer -->
    <bean id="sciPostQueryFilter" class="mil.navy.spawar.swif.security.filters.SCIMongoRecordFilter" >
		<property name="databaseLabel" ref="securityContext" />
		<property name="attributeConfig" ref="sciConfig" />
    </bean>

    <!-- sap attribute security post-query filer -->
    <bean id="sapPostQueryFilter"  class="mil.navy.spawar.swif.security.filters.SAPMongoRecordFilter" >
		<property name="databaseLabel" ref="securityContext" />
		<property name="attributeConfig" ref="sapConfig" />
    </bean>

    <!-- relto attribute security post-query filer -->
    <bean id="reltoPostQueryFilter" class="mil.navy.spawar.swif.security.filters.RelToMongoRecordFilter" >
        <property name="databaseLabel" ref="securityContext" />
        <property name="attributeConfig" ref="relToConfig" />
    </bean>

    <!-- auth decision manager configuration -->
    <!-- this will tell the auth mgr which security filters to apply for -->
    <!-- docs going into the database and docs retrieved from the database () -->
    <bean id="authDecisionManager" class="mil.navy.spawar.swif.security.MongoAuthDecisionManagerImpl">
        <property name="queryFilters" >
              <list>
                  <ref bean="classificationPreQueryFilter" />
                  <ref bean="sciPreQueryFilter" />
                  <ref bean="sapPreQueryFilter" />
                  <ref bean="reltoPreQueryFilter" />
              </list>
          </property>
        <property name="recordFilters" >
              <list>
                  <ref bean="classificationPostQueryFilter" />
                  <ref bean="sciPostQueryFilter" />
                  <ref bean="sapPostQueryFilter" />
                  <ref bean="reltoPostQueryFilter" />
              </list>
          </property>
    </bean>

    <!-- data access manager configuration -->
    <!-- needs references to the database instance & the auth mgr -->
    <bean id="dataAccessManager" class="mil.navy.spawar.swif.data.MongoDataAccessManagerImpl">
        <property name="database" ref="mongodb"/>
        <property name="authorizationManager" ref="authDecisionManager"/>
    </bean>

    <bean id="ldapService" class="mil.navy.spawar.swif.ldap.SwifLdapServiceImpl">
        <constructor-arg ref="ldapContextSource"/>
        <property name="swifUserContextMapper" ref="swifUserConextMapper"/>
        <property name="swifGroupContextMapper" ref="swifGroupContextMapper"/>
        <property name="userBaseDN"  value="${ldap.user.base.dn}"/>
        <property name="groupBaseDN"  value="${ldap.group.base.dn}"/>
    </bean>

    <bean id="swifUserConextMapper" class="mil.navy.spawar.swif.ldap.SwifUserContextMapper">
        <property name="userNameMapping" value="cn"/>
        <property name="userRealNameMapping" value="givenName"/>
        <property name="emailMapping" value="mail"/>
        <property name="phoneMapping" value="telephoneNumber"/>
        <property name="organizationMapping" value="o"/>
    </bean>

    <bean id="swifGroupContextMapper" class="mil.navy.spawar.swif.ldap.SwifGroupContextMapper">
        <property name="ldapService" ref="ldapService"/>
        <property name="groupNameMapping" value="cn"/>
        <property name="memberMapping" value="member"/>
    </bean>

    <!-- binary collection full text searchable attrs -->
    <!--util:list id="binaryMapping">
        <value>parentDocumentId</value>
    </util:list-->

    <!-- define the collections that support full text search -->
    <!-- reference a list of their attr name(s) that are searchable -->
    <util:map id="fullTextColumnMapping" value-type="java.util.List">
        <!--entry key="binary" value-ref="binaryMapping"/-->
    </util:map>


    <!-- production properties -->
    <beans profile="production">
        <context:property-placeholder location="classpath*:swif-production.properties"/>
    </beans>


</beans>
